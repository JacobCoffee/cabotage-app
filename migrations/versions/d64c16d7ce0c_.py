"""empty message

Revision ID: d64c16d7ce0c
Revises: 
Create Date: 2018-03-07 13:10:43.771820

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

import citext
import sqlalchemy_utils.types.json

# revision identifiers, used by Alembic.
revision = "d64c16d7ce0c"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    conn = op.get_bind()
    conn.execute("CREATE EXTENSION IF NOT EXISTS citext")
    conn.execute("CREATE EXTENSION IF NOT EXISTS pgcrypto")
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "activity",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("verb", sa.Unicode(length=255), nullable=True),
        sa.Column("transaction_id", sa.BigInteger(), nullable=False),
        sa.Column("data", sqlalchemy_utils.types.json.JSONType(), nullable=True),
        sa.Column("object_type", sa.String(length=255), nullable=True),
        sa.Column("object_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("object_tx_id", sa.BigInteger(), nullable=True),
        sa.Column("target_type", sa.String(length=255), nullable=True),
        sa.Column("target_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("target_tx_id", sa.BigInteger(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_activity")),
    )
    op.create_index(
        op.f("ix_activity_transaction_id"), "activity", ["transaction_id"], unique=False
    )
    op.create_table(
        "organizations",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("slug", citext.CIText(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_organizations")),
        sa.UniqueConstraint("slug", name=op.f("uq_organizations_slug")),
    )
    op.create_table(
        "organizations_version",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("name", sa.Text(), autoincrement=False, nullable=True),
        sa.Column("slug", citext.CIText(), autoincrement=False, nullable=True),
        sa.Column(
            "transaction_id", sa.BigInteger(), autoincrement=False, nullable=False
        ),
        sa.Column("end_transaction_id", sa.BigInteger(), nullable=True),
        sa.Column("operation_type", sa.SmallInteger(), nullable=False),
        sa.PrimaryKeyConstraint(
            "id", "transaction_id", name=op.f("pk_organizations_version")
        ),
    )
    op.create_index(
        op.f("ix_organizations_version_end_transaction_id"),
        "organizations_version",
        ["end_transaction_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_organizations_version_operation_type"),
        "organizations_version",
        ["operation_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_organizations_version_transaction_id"),
        "organizations_version",
        ["transaction_id"],
        unique=False,
    )
    op.create_table(
        "project_app_configurations_version",
        sa.Column("created", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column("updated", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "application_id",
            postgresql.UUID(as_uuid=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("name", citext.CIText(), autoincrement=False, nullable=True),
        sa.Column("value", sa.String(length=2048), autoincrement=False, nullable=True),
        sa.Column("key_slug", sa.Text(), autoincrement=False, nullable=True),
        sa.Column("version_id", sa.Integer(), autoincrement=False, nullable=True),
        sa.Column("deleted", sa.Boolean(), autoincrement=False, nullable=True),
        sa.Column("secret", sa.Boolean(), autoincrement=False, nullable=True),
        sa.Column(
            "transaction_id", sa.BigInteger(), autoincrement=False, nullable=False
        ),
        sa.Column("end_transaction_id", sa.BigInteger(), nullable=True),
        sa.Column("operation_type", sa.SmallInteger(), nullable=False),
        sa.PrimaryKeyConstraint(
            "id", "transaction_id", name=op.f("pk_project_app_configurations_version")
        ),
    )
    op.create_index(
        op.f("ix_project_app_configurations_version_end_transaction_id"),
        "project_app_configurations_version",
        ["end_transaction_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_project_app_configurations_version_operation_type"),
        "project_app_configurations_version",
        ["operation_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_project_app_configurations_version_transaction_id"),
        "project_app_configurations_version",
        ["transaction_id"],
        unique=False,
    )
    op.create_table(
        "project_app_images_version",
        sa.Column("created", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column("updated", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "application_id",
            postgresql.UUID(as_uuid=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "repository_name", sa.String(length=256), autoincrement=False, nullable=True
        ),
        sa.Column(
            "image_id", sa.String(length=256), autoincrement=False, nullable=True
        ),
        sa.Column("version", sa.Integer(), autoincrement=False, nullable=True),
        sa.Column("version_id", sa.Integer(), autoincrement=False, nullable=True),
        sa.Column("built", sa.Boolean(), autoincrement=False, nullable=True),
        sa.Column("error", sa.Boolean(), autoincrement=False, nullable=True),
        sa.Column(
            "error_detail", sa.String(length=2048), autoincrement=False, nullable=True
        ),
        sa.Column("deleted", sa.Boolean(), autoincrement=False, nullable=True),
        sa.Column(
            "build_slug", sa.String(length=1024), autoincrement=False, nullable=True
        ),
        sa.Column("dockerfile", sa.Text(), autoincrement=False, nullable=True),
        sa.Column("procfile", sa.Text(), autoincrement=False, nullable=True),
        sa.Column(
            "processes",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "image_metadata",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("image_build_log", sa.Text(), autoincrement=False, nullable=True),
        sa.Column(
            "transaction_id", sa.BigInteger(), autoincrement=False, nullable=False
        ),
        sa.Column("end_transaction_id", sa.BigInteger(), nullable=True),
        sa.Column("operation_type", sa.SmallInteger(), nullable=False),
        sa.PrimaryKeyConstraint(
            "id", "transaction_id", name=op.f("pk_project_app_images_version")
        ),
    )
    op.create_index(
        op.f("ix_project_app_images_version_end_transaction_id"),
        "project_app_images_version",
        ["end_transaction_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_project_app_images_version_operation_type"),
        "project_app_images_version",
        ["operation_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_project_app_images_version_transaction_id"),
        "project_app_images_version",
        ["transaction_id"],
        unique=False,
    )
    op.create_table(
        "project_app_releases_version",
        sa.Column("created", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column("updated", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "application_id",
            postgresql.UUID(as_uuid=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "platform",
            postgresql.ENUM(
                "wind",
                "steam",
                "diesel",
                "stirling",
                "nuclear",
                "electric",
                name="platform_version",
            ),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "image",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "configuration",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "image_changes",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "configuration_changes",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("version_id", sa.Integer(), autoincrement=False, nullable=True),
        sa.Column(
            "repository_name", sa.String(length=256), autoincrement=False, nullable=True
        ),
        sa.Column(
            "release_id", sa.String(length=256), autoincrement=False, nullable=True
        ),
        sa.Column("version", sa.Integer(), autoincrement=False, nullable=True),
        sa.Column("built", sa.Boolean(), autoincrement=False, nullable=True),
        sa.Column("error", sa.Boolean(), autoincrement=False, nullable=True),
        sa.Column(
            "error_detail", sa.String(length=2048), autoincrement=False, nullable=True
        ),
        sa.Column("deleted", sa.Boolean(), autoincrement=False, nullable=True),
        sa.Column("dockerfile", sa.Text(), autoincrement=False, nullable=True),
        sa.Column(
            "release_metadata",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("release_build_log", sa.Text(), autoincrement=False, nullable=True),
        sa.Column(
            "transaction_id", sa.BigInteger(), autoincrement=False, nullable=False
        ),
        sa.Column("end_transaction_id", sa.BigInteger(), nullable=True),
        sa.Column("operation_type", sa.SmallInteger(), nullable=False),
        sa.PrimaryKeyConstraint(
            "id", "transaction_id", name=op.f("pk_project_app_releases_version")
        ),
    )
    op.create_index(
        op.f("ix_project_app_releases_version_end_transaction_id"),
        "project_app_releases_version",
        ["end_transaction_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_project_app_releases_version_operation_type"),
        "project_app_releases_version",
        ["operation_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_project_app_releases_version_transaction_id"),
        "project_app_releases_version",
        ["transaction_id"],
        unique=False,
    )
    op.create_table(
        "project_applications_version",
        sa.Column("created", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column("updated", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "project_id",
            postgresql.UUID(as_uuid=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("name", sa.Text(), autoincrement=False, nullable=True),
        sa.Column("slug", citext.CIText(), autoincrement=False, nullable=True),
        sa.Column(
            "platform",
            postgresql.ENUM(
                "wind",
                "steam",
                "diesel",
                "stirling",
                "nuclear",
                "electric",
                name="platform_version",
            ),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("version_id", sa.Integer(), autoincrement=False, nullable=True),
        sa.Column(
            "transaction_id", sa.BigInteger(), autoincrement=False, nullable=False
        ),
        sa.Column("end_transaction_id", sa.BigInteger(), nullable=True),
        sa.Column("operation_type", sa.SmallInteger(), nullable=False),
        sa.PrimaryKeyConstraint(
            "id", "transaction_id", name=op.f("pk_project_applications_version")
        ),
    )
    op.create_index(
        op.f("ix_project_applications_version_end_transaction_id"),
        "project_applications_version",
        ["end_transaction_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_project_applications_version_operation_type"),
        "project_applications_version",
        ["operation_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_project_applications_version_transaction_id"),
        "project_applications_version",
        ["transaction_id"],
        unique=False,
    )
    op.create_table(
        "projects_version",
        sa.Column("created", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column("updated", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "organization_id",
            postgresql.UUID(as_uuid=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("name", sa.Text(), autoincrement=False, nullable=True),
        sa.Column("slug", citext.CIText(), autoincrement=False, nullable=True),
        sa.Column(
            "transaction_id", sa.BigInteger(), autoincrement=False, nullable=False
        ),
        sa.Column("end_transaction_id", sa.BigInteger(), nullable=True),
        sa.Column("operation_type", sa.SmallInteger(), nullable=False),
        sa.PrimaryKeyConstraint(
            "id", "transaction_id", name=op.f("pk_projects_version")
        ),
    )
    op.create_index(
        op.f("ix_projects_version_end_transaction_id"),
        "projects_version",
        ["end_transaction_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_projects_version_operation_type"),
        "projects_version",
        ["operation_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_projects_version_transaction_id"),
        "projects_version",
        ["transaction_id"],
        unique=False,
    )
    op.create_table(
        "roles",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("name", sa.String(length=80), nullable=True),
        sa.Column("description", sa.String(length=255), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_roles")),
        sa.UniqueConstraint("name", name=op.f("uq_roles_name")),
    )
    op.create_table(
        "roles_users_version",
        sa.Column(
            "user_id", postgresql.UUID(as_uuid=True), autoincrement=False, nullable=True
        ),
        sa.Column(
            "role_id", postgresql.UUID(as_uuid=True), autoincrement=False, nullable=True
        ),
        sa.Column(
            "transaction_id", sa.BigInteger(), autoincrement=False, nullable=False
        ),
        sa.Column("end_transaction_id", sa.BigInteger(), nullable=True),
        sa.Column("operation_type", sa.SmallInteger(), nullable=False),
        sa.PrimaryKeyConstraint("transaction_id", name=op.f("pk_roles_users_version")),
    )
    op.create_index(
        op.f("ix_roles_users_version_end_transaction_id"),
        "roles_users_version",
        ["end_transaction_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_roles_users_version_operation_type"),
        "roles_users_version",
        ["operation_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_roles_users_version_transaction_id"),
        "roles_users_version",
        ["transaction_id"],
        unique=False,
    )
    op.create_table(
        "roles_version",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("name", sa.String(length=80), autoincrement=False, nullable=True),
        sa.Column(
            "description", sa.String(length=255), autoincrement=False, nullable=True
        ),
        sa.Column(
            "transaction_id", sa.BigInteger(), autoincrement=False, nullable=False
        ),
        sa.Column("end_transaction_id", sa.BigInteger(), nullable=True),
        sa.Column("operation_type", sa.SmallInteger(), nullable=False),
        sa.PrimaryKeyConstraint("id", "transaction_id", name=op.f("pk_roles_version")),
    )
    op.create_index(
        op.f("ix_roles_version_end_transaction_id"),
        "roles_version",
        ["end_transaction_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_roles_version_operation_type"),
        "roles_version",
        ["operation_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_roles_version_transaction_id"),
        "roles_version",
        ["transaction_id"],
        unique=False,
    )
    op.create_table(
        "teams",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("name", sa.String(length=64), nullable=False),
        sa.Column("slug", sa.String(length=64), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_teams")),
    )
    op.create_table(
        "teams_version",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("name", sa.String(length=64), autoincrement=False, nullable=True),
        sa.Column("slug", sa.String(length=64), autoincrement=False, nullable=True),
        sa.Column(
            "transaction_id", sa.BigInteger(), autoincrement=False, nullable=False
        ),
        sa.Column("end_transaction_id", sa.BigInteger(), nullable=True),
        sa.Column("operation_type", sa.SmallInteger(), nullable=False),
        sa.PrimaryKeyConstraint("id", "transaction_id", name=op.f("pk_teams_version")),
    )
    op.create_index(
        op.f("ix_teams_version_end_transaction_id"),
        "teams_version",
        ["end_transaction_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_teams_version_operation_type"),
        "teams_version",
        ["operation_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_teams_version_transaction_id"),
        "teams_version",
        ["transaction_id"],
        unique=False,
    )
    op.create_table(
        "users",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("username", sa.String(length=255), nullable=False),
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("password", sa.String(length=255), nullable=False),
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.Column("admin", sa.Boolean(), nullable=False),
        sa.Column("registered_at", sa.DateTime(), nullable=False),
        sa.Column("confirmed_at", sa.DateTime(), nullable=True),
        sa.Column("last_login_at", sa.DateTime(), nullable=True),
        sa.Column("current_login_at", sa.DateTime(), nullable=True),
        sa.Column("last_login_ip", postgresql.INET(), nullable=True),
        sa.Column("current_login_ip", postgresql.INET(), nullable=True),
        sa.Column("login_count", sa.Integer(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_users")),
        sa.UniqueConstraint("email", name=op.f("uq_users_email")),
        sa.UniqueConstraint("username", name=op.f("uq_users_username")),
    )
    op.create_table(
        "users_version",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "username", sa.String(length=255), autoincrement=False, nullable=True
        ),
        sa.Column("email", sa.String(length=255), autoincrement=False, nullable=True),
        sa.Column("active", sa.Boolean(), autoincrement=False, nullable=True),
        sa.Column("admin", sa.Boolean(), autoincrement=False, nullable=True),
        sa.Column("registered_at", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column("confirmed_at", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column("last_login_at", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column(
            "current_login_at", sa.DateTime(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "last_login_ip", postgresql.INET(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "current_login_ip", postgresql.INET(), autoincrement=False, nullable=True
        ),
        sa.Column("login_count", sa.Integer(), autoincrement=False, nullable=True),
        sa.Column(
            "transaction_id", sa.BigInteger(), autoincrement=False, nullable=False
        ),
        sa.Column("end_transaction_id", sa.BigInteger(), nullable=True),
        sa.Column("operation_type", sa.SmallInteger(), nullable=False),
        sa.PrimaryKeyConstraint("id", "transaction_id", name=op.f("pk_users_version")),
    )
    op.create_index(
        op.f("ix_users_version_end_transaction_id"),
        "users_version",
        ["end_transaction_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_users_version_operation_type"),
        "users_version",
        ["operation_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_users_version_transaction_id"),
        "users_version",
        ["transaction_id"],
        unique=False,
    )
    op.create_table(
        "organization_members",
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("organization_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("admin", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["organizations.id"],
            name=op.f("fk_organization_members_organization_id_organizations"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_organization_members_user_id_users"),
        ),
        sa.PrimaryKeyConstraint(
            "user_id", "organization_id", name=op.f("pk_organization_members")
        ),
    )
    op.create_table(
        "organization_teams",
        sa.Column("organization_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("team_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["organizations.id"],
            name=op.f("fk_organization_teams_organization_id_organizations"),
        ),
        sa.ForeignKeyConstraint(
            ["team_id"], ["teams.id"], name=op.f("fk_organization_teams_team_id_teams")
        ),
        sa.PrimaryKeyConstraint(
            "organization_id", "team_id", name=op.f("pk_organization_teams")
        ),
    )
    op.create_table(
        "projects",
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=False),
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("organization_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("slug", citext.CIText(), nullable=False),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["organizations.id"],
            name=op.f("fk_projects_organization_id_organizations"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_projects")),
        sa.UniqueConstraint(
            "organization_id", "slug", name=op.f("uq_projects_organization_id")
        ),
    )
    op.create_table(
        "roles_users",
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("role_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["role_id"], ["roles.id"], name=op.f("fk_roles_users_role_id_roles")
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("fk_roles_users_user_id_users")
        ),
    )
    op.create_table(
        "team_members",
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("team_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("admin", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["team_id"], ["teams.id"], name=op.f("fk_team_members_team_id_teams")
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("fk_team_members_user_id_users")
        ),
        sa.PrimaryKeyConstraint("user_id", "team_id", name=op.f("pk_team_members")),
    )
    op.create_table(
        "transaction",
        sa.Column("issued_at", sa.DateTime(), nullable=True),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("remote_addr", sa.String(length=50), nullable=True),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("fk_transaction_user_id_users")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_transaction")),
    )
    op.create_index(
        op.f("ix_transaction_user_id"), "transaction", ["user_id"], unique=False
    )
    op.create_table(
        "project_applications",
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=False),
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("project_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("slug", citext.CIText(), nullable=False),
        sa.Column(
            "platform",
            postgresql.ENUM(
                "wind",
                "steam",
                "diesel",
                "stirling",
                "nuclear",
                "electric",
                name="platform_version",
            ),
            nullable=False,
        ),
        sa.Column("version_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["projects.id"],
            name=op.f("fk_project_applications_project_id_projects"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_project_applications")),
        sa.UniqueConstraint(
            "project_id", "slug", name=op.f("uq_project_applications_project_id")
        ),
    )
    op.create_table(
        "project_app_configurations",
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=False),
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("application_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("name", citext.CIText(), nullable=False),
        sa.Column("value", sa.String(length=2048), nullable=False),
        sa.Column("key_slug", sa.Text(), nullable=True),
        sa.Column("version_id", sa.Integer(), nullable=False),
        sa.Column("deleted", sa.Boolean(), nullable=False),
        sa.Column("secret", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["application_id"],
            ["project_applications.id"],
            name=op.f(
                "fk_project_app_configurations_application_id_project_applications"
            ),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_project_app_configurations")),
        sa.UniqueConstraint(
            "application_id",
            "name",
            name=op.f("uq_project_app_configurations_application_id"),
        ),
    )
    op.create_table(
        "project_app_images",
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=False),
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("application_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("repository_name", sa.String(length=256), nullable=False),
        sa.Column("image_id", sa.String(length=256), nullable=True),
        sa.Column("version", sa.Integer(), nullable=False),
        sa.Column("version_id", sa.Integer(), nullable=False),
        sa.Column("built", sa.Boolean(), nullable=False),
        sa.Column("error", sa.Boolean(), nullable=False),
        sa.Column("error_detail", sa.String(length=2048), nullable=True),
        sa.Column("deleted", sa.Boolean(), nullable=False),
        sa.Column("build_slug", sa.String(length=1024), nullable=False),
        sa.Column("dockerfile", sa.Text(), nullable=True),
        sa.Column("procfile", sa.Text(), nullable=True),
        sa.Column("processes", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column(
            "image_metadata", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("image_build_log", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["application_id"],
            ["project_applications.id"],
            name=op.f("fk_project_app_images_application_id_project_applications"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_project_app_images")),
    )
    op.create_table(
        "project_app_releases",
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=False),
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("application_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "platform",
            postgresql.ENUM(
                "wind",
                "steam",
                "diesel",
                "stirling",
                "nuclear",
                "electric",
                name="platform_version",
            ),
            nullable=False,
        ),
        sa.Column("image", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column(
            "configuration", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column(
            "image_changes", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column(
            "configuration_changes",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=False,
        ),
        sa.Column("version_id", sa.Integer(), nullable=False),
        sa.Column("repository_name", sa.String(length=256), nullable=False),
        sa.Column("release_id", sa.String(length=256), nullable=True),
        sa.Column("version", sa.Integer(), nullable=False),
        sa.Column("built", sa.Boolean(), nullable=False),
        sa.Column("error", sa.Boolean(), nullable=False),
        sa.Column("error_detail", sa.String(length=2048), nullable=True),
        sa.Column("deleted", sa.Boolean(), nullable=False),
        sa.Column("dockerfile", sa.Text(), nullable=True),
        sa.Column(
            "release_metadata", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("release_build_log", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["application_id"],
            ["project_applications.id"],
            name=op.f("fk_project_app_releases_application_id_project_applications"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_project_app_releases")),
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("project_app_releases")
    op.drop_table("project_app_images")
    op.drop_table("project_app_configurations")
    op.drop_table("project_applications")
    op.drop_index(op.f("ix_transaction_user_id"), table_name="transaction")
    op.drop_table("transaction")
    op.drop_table("team_members")
    op.drop_table("roles_users")
    op.drop_table("projects")
    op.drop_table("organization_teams")
    op.drop_table("organization_members")
    op.drop_index(op.f("ix_users_version_transaction_id"), table_name="users_version")
    op.drop_index(op.f("ix_users_version_operation_type"), table_name="users_version")
    op.drop_index(
        op.f("ix_users_version_end_transaction_id"), table_name="users_version"
    )
    op.drop_table("users_version")
    op.drop_table("users")
    op.drop_index(op.f("ix_teams_version_transaction_id"), table_name="teams_version")
    op.drop_index(op.f("ix_teams_version_operation_type"), table_name="teams_version")
    op.drop_index(
        op.f("ix_teams_version_end_transaction_id"), table_name="teams_version"
    )
    op.drop_table("teams_version")
    op.drop_table("teams")
    op.drop_index(op.f("ix_roles_version_transaction_id"), table_name="roles_version")
    op.drop_index(op.f("ix_roles_version_operation_type"), table_name="roles_version")
    op.drop_index(
        op.f("ix_roles_version_end_transaction_id"), table_name="roles_version"
    )
    op.drop_table("roles_version")
    op.drop_index(
        op.f("ix_roles_users_version_transaction_id"), table_name="roles_users_version"
    )
    op.drop_index(
        op.f("ix_roles_users_version_operation_type"), table_name="roles_users_version"
    )
    op.drop_index(
        op.f("ix_roles_users_version_end_transaction_id"),
        table_name="roles_users_version",
    )
    op.drop_table("roles_users_version")
    op.drop_table("roles")
    op.drop_index(
        op.f("ix_projects_version_transaction_id"), table_name="projects_version"
    )
    op.drop_index(
        op.f("ix_projects_version_operation_type"), table_name="projects_version"
    )
    op.drop_index(
        op.f("ix_projects_version_end_transaction_id"), table_name="projects_version"
    )
    op.drop_table("projects_version")
    op.drop_index(
        op.f("ix_project_applications_version_transaction_id"),
        table_name="project_applications_version",
    )
    op.drop_index(
        op.f("ix_project_applications_version_operation_type"),
        table_name="project_applications_version",
    )
    op.drop_index(
        op.f("ix_project_applications_version_end_transaction_id"),
        table_name="project_applications_version",
    )
    op.drop_table("project_applications_version")
    op.drop_index(
        op.f("ix_project_app_releases_version_transaction_id"),
        table_name="project_app_releases_version",
    )
    op.drop_index(
        op.f("ix_project_app_releases_version_operation_type"),
        table_name="project_app_releases_version",
    )
    op.drop_index(
        op.f("ix_project_app_releases_version_end_transaction_id"),
        table_name="project_app_releases_version",
    )
    op.drop_table("project_app_releases_version")
    op.drop_index(
        op.f("ix_project_app_images_version_transaction_id"),
        table_name="project_app_images_version",
    )
    op.drop_index(
        op.f("ix_project_app_images_version_operation_type"),
        table_name="project_app_images_version",
    )
    op.drop_index(
        op.f("ix_project_app_images_version_end_transaction_id"),
        table_name="project_app_images_version",
    )
    op.drop_table("project_app_images_version")
    op.drop_index(
        op.f("ix_project_app_configurations_version_transaction_id"),
        table_name="project_app_configurations_version",
    )
    op.drop_index(
        op.f("ix_project_app_configurations_version_operation_type"),
        table_name="project_app_configurations_version",
    )
    op.drop_index(
        op.f("ix_project_app_configurations_version_end_transaction_id"),
        table_name="project_app_configurations_version",
    )
    op.drop_table("project_app_configurations_version")
    op.drop_index(
        op.f("ix_organizations_version_transaction_id"),
        table_name="organizations_version",
    )
    op.drop_index(
        op.f("ix_organizations_version_operation_type"),
        table_name="organizations_version",
    )
    op.drop_index(
        op.f("ix_organizations_version_end_transaction_id"),
        table_name="organizations_version",
    )
    op.drop_table("organizations_version")
    op.drop_table("organizations")
    op.drop_index(op.f("ix_activity_transaction_id"), table_name="activity")
    op.drop_table("activity")
    # ### end Alembic commands ###
