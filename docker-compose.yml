version: '3'

volumes:
  consuldata:
  miniodata:
  postgresdata:
  redisdata:

services:
  db:
    image: postgres
    restart: always
    environment:
      POSTGRES_DB: cabotage_dev
    ports:
      - "5432:5432"
    volumes:
      - postgresdata:/var/lib/postgresql/data/
  redis:
    image: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/var/lib/redis/
  consul:
    image: consul
    restart: always
    environment:
      CONSUL_CLIENT_INTERFACE: eth0
    ports:
      - "8500:8500"
    volumes:
      - consuldata:/consul/data
  vault:
    image: vault
    restart: on-failure
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: deadbeef-dead-beef-dead-beefdeadbeef
    ports:
      - "8200:8200"
    cap_add:
      - IPC_LOCK
  registry:
    image: registry:2
    restart: always
    command: ["/etc/docker/registry-local/config.yml"]
    environment:
      REGISTRY_STORAGE_S3_ACCESSKEY: MINIOACCESSKEY
      REGISTRY_STORAGE_S3_SECRETKEY: MINIOSECRETKEY
      REGISTRY_STORAGE_S3_ENDPOINT: http://minio:9000
      REGISTRY_STORAGE_S3_REGION: us-east-1
      REGISTRY_STORAGE_S3_REGIONENDPOINT: http://minio:9000
      REGISTRY_STORAGE_S3_BUCKET: cabotage-registry
      REGISTRY_STORAGE_S3_ENCRYPT: "false"
    ports:
      - "5000:5000"
    volumes:
      - ./docker-compose/registry:/etc/docker/registry-local
  cabotage-dind:
    image: docker:stable-dind
    command: --insecure-registry registry:5000
    restart: always
    ports:
      - "2375:2375"
    privileged: true
  minio:
    image: minio/minio
    command: server /export
    restart: always
    environment:
      MINIO_ACCESS_KEY: MINIOACCESSKEY
      MINIO_SECRET_KEY: MINIOSECRETKEY
      MINIO_REGION: us-east-1
    ports:
      - "9000:9000"
    volumes:
      - miniodata:/export
  cabotage-app:
    build: .
    command: pipenv run python manage.py runserver -h 0.0.0.0 -p 8000
    volumes:
      - .:/opt/cabotage-app/src
    ports:
      - "8000:8000"
  cabotage-app-worker:
    build: .
    command: pipenv run celery -A cabotage.celery.worker.celery worker -E --loglevel=INFO
    environment:
      - C_FORCE_ROOT=1
    volumes:
      - .:/opt/cabotage-app/src
